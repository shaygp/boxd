rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidString(value, maxLength) {
      return value is string && value.size() <= maxLength;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId)
                    && isValidString(request.resource.data.name, 100)
                    && isValidString(request.resource.data.username, 50)
                    && request.resource.data.email is string
                    && request.resource.data.created_at is timestamp
                    && request.resource.data.updated_at is timestamp;
      allow update: if isOwner(userId)
                    && (!('username' in request.resource.data.diff(resource.data).affectedKeys())
                        || request.resource.data.username == resource.data.username);
      allow delete: if isOwner(userId);
    }

    // User stats
    match /userStats/{userId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Race logs
    match /raceLogs/{logId} {
      allow read: if true;
      allow create: if isAuthenticated()
                    && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated()
                    && request.auth.uid == resource.data.userId
                    && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Watchlist
    match /watchlist/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Lists
    match /lists/{listId} {
      allow read: if true;
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Activities
    match /activities/{activityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Comments
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Likes
    match /likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Follows
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.followerId)
                    && request.resource.data.followerId != request.resource.data.followingId;
      allow delete: if isAuthenticated() && isOwner(resource.data.followerId);
    }

    // Reviews (if used separately from raceLogs)
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated()
                    && (request.auth.uid == request.resource.data.user_id
                        || request.auth.uid == request.resource.data.userId);
      allow update, delete: if isAuthenticated()
                            && (request.auth.uid == resource.data.user_id
                                || request.auth.uid == resource.data.userId);
    }
  }
}
